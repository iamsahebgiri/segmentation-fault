generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  questions        Question[]
  upvotedQuestions UpvotedQuestions[]
  comments         Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id          Int                @id @default(autoincrement())
  title       String             @db.VarChar(255)
  content     String             @db.Text
  contentHtml String             @db.Text
  hidden      Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  author      User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  upvotedBy   UpvotedQuestions[]
  comments    Comment[]

  @@index([authorId])
  @@fulltext([title, content])
}

model UpvotedQuestions {
  question   Question @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  questionId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId     String
  createdAt  DateTime @default(now())

  @@id([questionId, userId])
  @@index([questionId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  contentHtml String   @db.Text
  createdAt   DateTime @default(now())
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@index([authorId])
  @@index([questionId])
}
